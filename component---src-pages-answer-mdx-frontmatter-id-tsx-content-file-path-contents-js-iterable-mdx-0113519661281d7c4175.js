"use strict";(self.webpackChunknull_quiz_answers=self.webpackChunknull_quiz_answers||[]).push([[80],{5288:function(e,n,t){t.r(n),t.d(n,{Head:function(){return f},default:function(){return p}});var l=t(1151),a=t(7294);function r(e){const n=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,null,"이터러블(Iterable)"),"\n",a.createElement(n.p,null,"JS에서 이터러블은 반복 가능한 객체를 말합니다. 즉 ",a.createElement(n.code,null,"for...of"),"와 같은 반복문에서 사용할 수 있는 객체입니다."),"\n",a.createElement(n.p,null,"이터러블 객체는 ",a.createElement(n.code,null,"Symbol.iterator")," 메서드를 가지고 있어야 합니다."),"\n",a.createElement(n.p,null,"즉, 이터러블 객체는 ",a.createElement("mark",null,"Symbol.iterator")," 메서드를 구현하는 객체라고 할 수 있습니다."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"Symbol.iterator")," 메서드를 호출하면 ",a.createElement("mark",null,"이터레이터 객체"),"를 반환해야 합니다."),"\n",a.createElement(n.p,null,"실제 순회(반복)은 이터레이터 객체를 통해 이루어지게 됩니다."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"Array"),", ",a.createElement(n.code,null,"String"),", ",a.createElement(n.code,null,"Map"),", ",a.createElement(n.code,null,"Set")," 등은 모두 기본적으로 이터러블입니다."),"\n",a.createElement(n.h1,null,"이터레이터"),"\n",a.createElement(n.p,null,"이터레이터는 이터러블에서 반환되는 객체로, ",a.createElement(n.code,null,"next()")," 메서드가 구현되어야 합니다."),"\n",a.createElement(n.p,null,"이 ",a.createElement(n.code,null,"next()")," 메서드는 이터레이션을 한 단계씩 진행할 때 호출되며,"),"\n",a.createElement(n.p,null,"이터레이션이 끝날 때까지 각 호출 시마다 ",a.createElement(n.code,null,"{ value: 값, done: boolean }")," 형태의 객체를 반환합니다."),"\n",a.createElement(n.p,null,"value는 현재 순회 중인 값을 나타내며, done은 이터레이션이 끝났는지를 나타내는 불리언 값입니다."),"\n",a.createElement(n.h1,null,"일반 객체를 이터러블로 만들어보기"),"\n",a.createElement(n.p,null,"굳이 이럴 필요는 없지만 이해를 돕기 위해 일반 객체를 이터러블로 만드는 예제를 진행하겠습니다."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-javascript"},'const myObject = {\n  a: 1,\n  b: 2,\n  c: 3,\n\n  // Symbol.iterator 메서드를 추가하여 이터러블로 만듭니다.\n  [Symbol.iterator]() {\n    const entries = Object.entries(this); // 객체의 [key, value] 쌍 배열을 가져옴\n    let index = 0; // 초기 인덱스 설정\n\n    return {\n      // 이터레이터 객체의 next 메서드\n      next() {\n        if (index < entries.length) {\n          const [key, value] = entries[index]; // 현재 인덱스의 [key, value] 쌍\n          index++; // 인덱스 증가\n          return { value: [key, value], done: false }; // [key, value] 반환\n        } else {\n          return { done: true }; // 순회 완료 시 done: true\n        }\n      },\n    };\n  },\n};\n\n// 이터러블이 된 객체를 for...of 루프를 사용해 순회할 수 있습니다.\nfor (const [key, value] of myObject) {\n  console.log(key, value); // "a 1", "b 2", "c 3" 출력\n}\n')),"\n",a.createElement(n.p,null,"이해가 좀 되셨나요?"),"\n",a.createElement(n.h1,null,"Enumerable"),"\n",a.createElement(n.p,null,"js에서 Enumerable은 다른 언어와 조금 다르게, 객체의 속성을 ",a.createElement(n.code,null,"for...in")," 루프와 같은 방법으로 열거할 수 있는 속성을 의미합니다."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-javascript"},"const foo = {\n  a: 1,\n  b: 2,\n};\nfor (const key in foo) {\n  console.log(key);\n}\n\n// a\n// b\n")),"\n",a.createElement(n.p,null,"기본적으로 객체의 속성은 Enumerable이기 때문에 위와 같이 동작합니다."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"Object.defineProperty()")," 메서드를 통해 속성을 변경해 확인할 수 있습니다."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-javascript"},"Object.defineProperty(foo, \"a\", {\n  enumerable: false,\n});\n\nfor (const key in foo) {\n  console.log(key); // 'b'만 출력됩니다\n}\n")),"\n",a.createElement(n.p,null,"객체에 정의된 프로토타입 속성도 Enumerable 입니다."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-javascript"},'function Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.getAge = function () {\n    return this.age;\n  };\n}\n\nPerson.prototype.getName = function () {\n  return this.name;\n};\n\nconst han = new Person("han", 50);\nfor (const i in han) {\n  console.log(i);\n}\n// name\n// age\n// getAge\n// getName\n')),"\n",a.createElement(n.p,null,"이제 왜 Object의 프로토타입 속성들이 ",a.createElement(n.code,null,"for...in")," 구문으로 순회되지 않는지 감이 오시나요?\n",a.createElement(n.code,null,"enumerable")," 속성이 ",a.createElement(n.code,null,"false"),"이기 때문입니다 !"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},o=t(4630),u=t(394),m=t(837),s=t(9622);const i=u.styled.div.attrs({className:"container"}).withConfig({displayName:"mdxfrontmatter__id__Container",componentId:"sc-1gyqok2-0"})(["margin-top:15%;"]),E=u.styled.div.withConfig({displayName:"mdxfrontmatter__id__FlexEndContainer",componentId:"sc-1gyqok2-1"})(["display:flex;justify-content:end;"]);m.Z.registerLanguage("javascript",s.Z);const d=e=>{let{children:n,data:{mdx:t}}=e;const{title:l,date:r,tags:c,relatedLinks:o}=t.frontmatter;return(0,a.useEffect)((()=>{m.Z.highlightAll()}),[]),a.createElement(a.Fragment,null,a.createElement("link",{rel:"stylesheet",href:"https://cdn.jsdelivr.net/npm/highlight.js@10.7.2/styles/atom-one-dark.min.css"}),a.createElement(i,null,a.createElement("h1",null,l),a.createElement("div",null,a.createElement("i",null,"About "),null==c?void 0:c.map(((e,n)=>a.createElement("i",{key:n},e,n!==c.length-1&&", ")))),a.createElement(E,null,a.createElement("i",null,r)),a.createElement("hr",null)),a.createElement(i,null,a.createElement("section",null,n)),a.createElement("article",null,a.createElement("h3",null,"더 알아보려면?"),a.createElement("ul",null,null==o?void 0:o.map(((e,n)=>a.createElement("li",{key:n},a.createElement("a",{href:e||"#"},e)))))),a.createElement(E,null,a.createElement("a",{href:"https://github.com/0hhanum/null_quiz_answers/issues/new?title="+l+" 수정 요청&body=잘못된 정보를 고쳐주시면 기프티콘을 드려요 :)"},a.createElement("p",null,"잘못된 정보가 있나요?"))))};function p(e){return a.createElement(d,e,a.createElement(c,e))}const f=e=>{var n,t;let{data:l}=e;return a.createElement(o.Z,{title:(null===(n=l.mdx)||void 0===n||null===(t=n.frontmatter)||void 0===t?void 0:t.title)||""})}}}]);
//# sourceMappingURL=component---src-pages-answer-mdx-frontmatter-id-tsx-content-file-path-contents-js-iterable-mdx-0113519661281d7c4175.js.map